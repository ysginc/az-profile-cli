#!/bin/bash

# Azure DevOps Profile Manager
# Manages multiple Azure CLI profiles for different organizations/environments

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Default profiles directory in user home, but allow override
if [ -n "$AZ_PROFILE_DIR" ]; then
    PROFILES_DIR="$AZ_PROFILE_DIR"
else
    PROFILES_DIR="$HOME/.az-profiles"
fi
ACTIVE_PROFILE_FILE="$PROFILES_DIR/.active-profile"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Create profiles directory if it doesn't exist
create_profiles_dir() {
    if [ ! -d "$PROFILES_DIR" ]; then
        mkdir -p "$PROFILES_DIR"
        log_info "Created profiles directory: $PROFILES_DIR"
    fi
}

# Parse profile configuration file
parse_profile_file() {
    local profile_file="$1"
    local section=""
    local key=""
    local value=""
    
    if [ ! -f "$profile_file" ]; then
        log_error "Profile file '$profile_file' not found"
        return 1
    fi
    
    # Initialize associative arrays (bash 4+ feature)
    declare -gA profile_config
    
    while IFS= read -r line; do
        # Skip comments and empty lines
        [[ "$line" =~ ^[[:space:]]*# ]] && continue
        [[ "$line" =~ ^[[:space:]]*$ ]] && continue
        
        # Parse sections [section]
        if [[ "$line" =~ ^\[(.+)\]$ ]]; then
            section="${BASH_REMATCH[1]}"
            continue
        fi
        
        # Parse key=value pairs
        if [[ "$line" =~ ^([^=]+)=(.*)$ ]]; then
            key="${BASH_REMATCH[1]}"
            value="${BASH_REMATCH[2]}"
            # Trim whitespace
            key="$(echo "$key" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"
            value="$(echo "$value" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"
            
            # Store in associative array with section.key format
            profile_config["${section}.${key}"]="$value"
        fi
    done < "$profile_file"
}

# Download remote profile file or handle Git repository
download_profile_file() {
    local url="$1"
    local profile_name_filter="$2"  # Optional filter for specific profile by name
    local batch_mode="$3"           # Set to "batch" for batch processing
    local temp_file="$(mktemp)"
    
    log_info "Downloading profile from: $url"
    
    # Detect URL type and download accordingly
    if [[ "$url" =~ ^https?:// ]] && ! [[ "$url" =~ github\.com ]] && ! [[ "$url" =~ gitlab\.com ]] && ! [[ "$url" =~ bitbucket\.org ]]; then
        # Direct HTTP/HTTPS download (not a git hosting service)
        if command -v curl >/dev/null 2>&1; then
            curl -fsSL "$url" > "$temp_file"
        elif command -v wget >/dev/null 2>&1; then
            wget -qO- "$url" > "$temp_file"
        else
            log_error "Neither curl nor wget available for downloading"
            rm -f "$temp_file"
            return 1
        fi
    elif [[ "$url" =~ ^git@ ]] || [[ "$url" =~ \.git$ ]] || [[ "$url" =~ github\.com ]] || [[ "$url" =~ gitlab\.com ]] || [[ "$url" =~ bitbucket\.org ]]; then
        # Git repository - clone to temp dir and extract profile(s)
        local temp_dir="$(mktemp -d)"
        if command -v git >/dev/null 2>&1; then
            log_info "Cloning repository..."
            git clone --depth 1 "$url" "$temp_dir" >/dev/null 2>&1
            if [ $? -ne 0 ]; then
                log_error "Failed to clone repository: $url"
                rm -rf "$temp_dir" "$temp_file"
                return 1
            fi
            
            # Look for .profile files in the repo (including subdirectories)
            local profile_files=()
            while IFS= read -r -d '' file; do
                profile_files+=("$file")
            done < <(find "$temp_dir" -name "*.profile" -type f -print0)
            
            if [ ${#profile_files[@]} -eq 0 ]; then
                log_error "No .profile files found in git repository"
                rm -rf "$temp_dir" "$temp_file"
                return 1
            fi
            
            # Handle different selection modes
            if [ "$batch_mode" = "batch" ]; then
                # Batch mode - return all profile files as a special marker
                echo "BATCH_MODE:$temp_dir" > "$temp_file"
                for file in "${profile_files[@]}"; do
                    echo "$file" >> "$temp_file"
                done
            elif [ -n "$profile_name_filter" ]; then
                # Profile name-based resolution
                local matched_file=""
                local matches=()
                
                # Look for exact filename match (with or without .profile extension)
                for file in "${profile_files[@]}"; do
                    local basename_no_ext="$(basename "$file" .profile)"
                    local basename_full="$(basename "$file")"
                    
                    if [ "$basename_no_ext" = "$profile_name_filter" ] || [ "$basename_full" = "$profile_name_filter" ] || [ "$basename_full" = "${profile_name_filter}.profile" ]; then
                        matches+=("$file")
                    fi
                done
                
                if [ ${#matches[@]} -eq 0 ]; then
                    log_error "No profile file found matching name: $profile_name_filter"
                    log_info "Available profiles:"
                    for file in "${profile_files[@]}"; do
                        local relative_path="${file#$temp_dir/}"
                        echo "  - $(basename "$file" .profile) ($relative_path)"
                    done
                    rm -rf "$temp_dir" "$temp_file"
                    return 1
                elif [ ${#matches[@]} -eq 1 ]; then
                    matched_file="${matches[0]}"
                    cp "$matched_file" "$temp_file"
                    log_success "Found profile: $(basename "$matched_file")"
                else
                    log_error "Multiple profile files match name '$profile_name_filter':"
                    for file in "${matches[@]}"; do
                        local relative_path="${file#$temp_dir/}"
                        echo "  - $relative_path"
                    done
                    rm -rf "$temp_dir" "$temp_file"
                    return 1
                fi
            elif [ ${#profile_files[@]} -eq 1 ]; then
                # Only one profile file, use it
                cp "${profile_files[0]}" "$temp_file"
                log_info "Using profile: $(basename "${profile_files[0]}")"
            else
                # Multiple profile files, let user choose interactively
                log_info "Found ${#profile_files[@]} profile files:"
                local i=1
                for file in "${profile_files[@]}"; do
                    local relative_path="${file#$temp_dir/}"
                    local profile_name="$(basename "$file" .profile)"
                    echo "  $i) $profile_name ($relative_path)"
                    ((i++))
                done
                echo "  a) All profiles (batch mode)"
                
                echo -n "Select profile file [1-${#profile_files[@]}/a]: "
                read -r selection
                
                if [ "$selection" = "a" ] || [ "$selection" = "A" ]; then
                    # Switch to batch mode
                    echo "BATCH_MODE:$temp_dir" > "$temp_file"
                    for file in "${profile_files[@]}"; do
                        echo "$file" >> "$temp_file"
                    done
                    log_success "Selected batch mode - will create all profiles"
                elif [[ "$selection" =~ ^[0-9]+$ ]] && [ "$selection" -ge 1 ] && [ "$selection" -le ${#profile_files[@]} ]; then
                    local selected_index=$((selection - 1))
                    cp "${profile_files[$selected_index]}" "$temp_file"
                    log_success "Selected: $(basename "${profile_files[$selected_index]}")"
                else
                    log_error "Invalid selection: $selection"
                    rm -rf "$temp_dir" "$temp_file"
                    return 1
                fi
            fi
            
            # Only remove temp_dir if not in batch mode (batch mode needs to keep it)
            if [ "$batch_mode" != "batch" ] && ! grep -q "^BATCH_MODE:" "$temp_file" 2>/dev/null; then
                rm -rf "$temp_dir"
            fi
        else
            log_error "Git not available for cloning repository"
            rm -f "$temp_file"
            return 1
        fi
    else
        log_error "Unsupported URL format: $url"
        rm -f "$temp_file"
        return 1
    fi
    
    if [ ! -s "$temp_file" ]; then
        log_error "Failed to download or empty profile file"
        rm -f "$temp_file"
        return 1
    fi
    
    echo "$temp_file"
}

# Resolve credential references (files, env vars, etc.)
resolve_credential() {
    local cred_spec="$1"
    
    # Handle different credential formats:
    # file:path/to/file - read from file
    # env:VARIABLE_NAME - read from environment variable
    # direct value - return as-is
    
    if [[ "$cred_spec" =~ ^file:(.+)$ ]]; then
        local file_path="${BASH_REMATCH[1]}"
        if [ -f "$file_path" ]; then
            cat "$file_path" | tr -d '\n'
        else
            log_error "Credential file not found: $file_path"
            return 1
        fi
    elif [[ "$cred_spec" =~ ^env:(.+)$ ]]; then
        local env_var="${BASH_REMATCH[1]}"
        local env_value="${!env_var}"
        if [ -n "$env_value" ]; then
            echo "$env_value"
        else
            log_error "Environment variable not set: $env_var"
            return 1
        fi
    else
        # Direct value
        echo "$cred_spec"
    fi
}

# Create profile from configuration file
create_profile_from_file() {
    local profile_file="$1"
    local override_name="$2"
    
    # Parse the profile file
    parse_profile_file "$profile_file"
    
    # Extract profile name (use override if provided)
    local profile_name="$override_name"
    if [ -z "$profile_name" ]; then
        profile_name="${profile_config[profile.name]}"
    fi
    
    if [ -z "$profile_name" ]; then
        log_error "Profile name not specified in file or command line"
        return 1
    fi
    
    # Validate profile name
    if ! [[ "$profile_name" =~ ^[a-zA-Z0-9_-]+$ ]]; then
        log_error "Profile name can only contain letters, numbers, hyphens, and underscores"
        return 1
    fi
    
    create_profiles_dir
    local profile_path="$PROFILES_DIR/$profile_name"
    
    if [ -d "$profile_path" ]; then
        log_error "Profile '$profile_name' already exists"
        return 1
    fi
    
    mkdir -p "$profile_path"
    log_success "Created profile '$profile_name' from configuration file"
    log_info "Profile directory: $profile_path"
    
    local description="${profile_config[profile.description]}"
    if [ -n "$description" ]; then
        log_info "Description: $description"
    fi
    
    # Configure Azure cloud if specified
    local azure_cloud="${profile_config[azure.cloud]}"
    if [ -n "$azure_cloud" ]; then
        log_info "Setting Azure cloud to: $azure_cloud"
        if command -v az >/dev/null 2>&1; then
            AZURE_CONFIG_DIR="$profile_path" az cloud set --name="$azure_cloud"
            if [ $? -eq 0 ]; then
                log_success "Azure cloud configured"
            else
                log_warning "Failed to configure Azure cloud"
            fi
        fi
    fi
    
    # Handle authentication
    local auth_method="${profile_config[auth.method]}"
    if [ -n "$auth_method" ]; then
        case "$auth_method" in
            "pat")
                local pat_token=""
                # Try different PAT sources in order of preference
                if [ -n "${profile_config[auth.pat]}" ]; then
                    pat_token=$(resolve_credential "${profile_config[auth.pat]}")
                elif [ -n "${profile_config[auth.pat_file]}" ]; then
                    pat_token=$(resolve_credential "file:${profile_config[auth.pat_file]}")
                elif [ -n "${profile_config[auth.pat_env]}" ]; then
                    pat_token=$(resolve_credential "env:${profile_config[auth.pat_env]}")
                fi
                
                if [ -n "$pat_token" ] && command -v az >/dev/null 2>&1; then
                    log_info "Logging in with PAT..."
                    echo "$pat_token" | AZURE_CONFIG_DIR="$profile_path" az devops login 2>/dev/null
                    if [ $? -eq 0 ]; then
                        log_success "Logged in using PAT"
                    else
                        log_warning "Failed to login with PAT"
                    fi
                fi
                ;;
            "azure-ad")
                log_info "Profile configured for Azure AD authentication"
                log_info "Run 'az-profile login $profile_name' to authenticate"
                ;;
            "interactive")
                log_info "Profile configured for interactive authentication"
                log_info "Run 'az-profile login $profile_name' to authenticate"
                ;;
        esac
    fi
    
    # Configure organization
    local org_url="${profile_config[devops.organization]}"
    if [ -n "$org_url" ] && command -v az >/dev/null 2>&1; then
        log_info "Setting organization to: $org_url"
        AZURE_CONFIG_DIR="$profile_path" az devops configure --defaults organization="$org_url"
        if [ $? -eq 0 ]; then
            log_success "Organization configured"
        else
            log_warning "Failed to configure organization"
        fi
    fi
    
    # Configure additional defaults
    local default_project="${profile_config[defaults.project]}"
    if [ -n "$default_project" ] && command -v az >/dev/null 2>&1; then
        log_info "Setting default project to: $default_project"
        AZURE_CONFIG_DIR="$profile_path" az devops configure --defaults project="$default_project"
        if [ $? -eq 0 ]; then
            log_success "Default project configured"
        else
            log_warning "Failed to configure default project"
        fi
    fi
    
    log_success "Profile '$profile_name' created and configured from file!"
    log_info "To use: $0 activate $profile_name"
}

# Show usage information
show_usage() {
    cat << EOF
Azure DevOps Profile Manager

Usage: $0 <command> [arguments] [options]

Commands:
    list, ls                    List all available profiles
    create <profile_name>       Create a new profile
    activate <profile_name>     Activate a profile (sets environment)
    deactivate                  Deactivate current profile
    delete <profile_name>       Delete a profile
    status                      Show current active profile
    login <profile_name>        Login to Azure for a specific profile
    configure <profile_name>    Configure DevOps defaults for a profile
    run <profile_name> <cmd>    Run an az command with a specific profile
    help                        Show this help message

Options for 'create':
    --type <type>               Profile type: 'cloud' or 'server' (default: prompt)
    --org <url>                 Organization URL
    --pat <token>               Personal Access Token (for server profiles)
    --pat-file <path>           Path to file containing PAT
    --cloud <cloud>             Azure cloud: 'AzureCloud', 'AzureUSGovernment', 'AzureChinaCloud', 'AzureGermanCloud'
    --profile-file <path>       Create from .profile config file
    --profile-url <url>         Create from remote .profile config file (http/https/git)
    --profile-name <name>       Select specific profile by name from git repo
    --batch                     Create all profiles found in git repository
    --non-interactive           Don't prompt for input

Options for 'login':
    --pat <token>               Personal Access Token
    --pat-file <path>           Path to file containing PAT
    --method <method>           Login method: 'azure-ad', 'pat', 'interactive'
    --cloud <cloud>             Azure cloud environment

Options for 'configure':
    --org <url>                 Organization URL
    --cloud <cloud>             Azure cloud environment
    --non-interactive           Don't prompt for input

Examples:
    # Manual profile creation
    $0 create myorg --type server --org https://devops.company.com/DefaultCollection --pat-file ./my-pat
    $0 create cloud-org --type cloud --org https://dev.azure.com/myorg --cloud AzureCloud
    $0 create gov-org --type cloud --org https://dev.azure.us/myorg --cloud AzureUSGovernment
    
    # Profile file creation - single profile
    $0 create myprofile --profile-file ./profiles/myorg.profile
    $0 create myprofile --profile-url https://example.com/profiles/myorg.profile
    
    # Profile creation from Git repositories
    $0 create myprofile --profile-url https://github.com/myorg/az-profiles.git
    $0 create myprofile --profile-url https://github.com/myorg/az-profiles.git --profile-name dev
    $0 create --profile-url https://github.com/myorg/az-profiles.git --batch
    
    # Other commands
    $0 login myorg --method pat --pat-file ./my-pat
    $0 configure myorg --org https://devops.company.com/DefaultCollection --non-interactive
    $0 run myorg devops project list
    $0 deactivate

Profile Storage: $PROFILES_DIR
EOF
}

# List all profiles
list_profiles() {
    create_profiles_dir
    
    echo "Available Azure CLI Profiles:"
    echo "=============================="
    
    local active_profile=""
    if [ -f "$ACTIVE_PROFILE_FILE" ]; then
        active_profile=$(cat "$ACTIVE_PROFILE_FILE")
    fi
    
    local found_profiles=false
    for profile_dir in "$PROFILES_DIR"/*; do
        if [ -d "$profile_dir" ] && [ "$(basename "$profile_dir")" != ".*" ]; then
            found_profiles=true
            local profile_name=$(basename "$profile_dir")
            if [ "$profile_name" = "$active_profile" ]; then
                echo -e "  ${GREEN}* $profile_name${NC} (active)"
            else
                echo "    $profile_name"
            fi
        fi
    done
    
    if [ "$found_profiles" = false ]; then
        echo "  No profiles found."
        echo ""
        echo "Create a profile with: $0 create <profile_name>"
    fi
}

# Create a new profile
create_profile() {
    local profile_name="$1"
    shift
    
    # Parse options first to check if we're in batch mode or using profile-name filtering
    local profile_type=""
    local org_url=""
    local pat_token=""
    local pat_file=""
    local azure_cloud=""
    local profile_file=""
    local profile_url=""
    local non_interactive=false
    local batch_mode=false
    local profile_name_filter=""
    
    # First pass: check for batch mode or profile-name to determine if profile_name is required
    local args=("$@")
    local i=0
    while [ $i -lt ${#args[@]} ]; do
        case "${args[$i]}" in
            --batch)
                batch_mode=true
                ;;
            --profile-name)
                if [ $((i + 1)) -lt ${#args[@]} ]; then
                    profile_name_filter="${args[$((i + 1))]}"
                fi
                ;;
            --profile-url|--profile-file)
                # These indicate we're using profile files
                ;;
        esac
        ((i++))
    done
    
    # Profile name is only required for manual creation or single profile from Git
    # It's not required only for batch mode
    if [ -z "$profile_name" ]; then
        if [ "$batch_mode" = false ]; then
            log_error "Profile name is required"
            echo "Usage: $0 create <profile_name> [options]"
            echo "       $0 create --profile-url <url> --batch"
            exit 1
        else
            # Set a dummy profile name for batch mode - it will be ignored anyway
            profile_name="batch-dummy"
        fi
    fi
    
    # Parse options
    local profile_type=""
    local org_url=""
    local pat_token=""
    local pat_file=""
    local azure_cloud=""
    local profile_file=""
    local profile_url=""
    local non_interactive=false
    local batch_mode=false
    local profile_name_filter=""
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --type)
                profile_type="$2"
                shift 2
                ;;
            --org)
                org_url="$2"
                shift 2
                ;;
            --pat)
                pat_token="$2"
                shift 2
                ;;
            --pat-file)
                pat_file="$2"
                shift 2
                ;;
            --cloud)
                azure_cloud="$2"
                shift 2
                ;;
            --profile-file)
                profile_file="$2"
                shift 2
                ;;
            --profile-url)
                profile_url="$2"
                shift 2
                ;;
            --profile-name)
                profile_name_filter="$2"
                shift 2
                ;;
            --batch)
                batch_mode=true
                shift
                ;;
            --non-interactive)
                non_interactive=true
                shift
                ;;
            *)
                log_error "Unknown option: $1"
                exit 1
                ;;
        esac
    done
    
    # Validate profile name (alphanumeric, hyphens, underscores)
    if ! [[ "$profile_name" =~ ^[a-zA-Z0-9_-]+$ ]]; then
        log_error "Profile name can only contain letters, numbers, hyphens, and underscores"
        exit 1
    fi
    
    # Handle profile file creation
    if [ -n "$profile_file" ] || [ -n "$profile_url" ]; then
        local actual_profile_file="$profile_file"
        local temp_file=""
        
        # Download remote profile if URL provided
        if [ -n "$profile_url" ]; then
            local batch_param=""
            if [ "$batch_mode" = true ]; then
                batch_param="batch"
            fi
            temp_file=$(download_profile_file "$profile_url" "$profile_name_filter" "$batch_param")
            if [ $? -ne 0 ]; then
                exit 1
            fi
            actual_profile_file="$temp_file"
        fi
        
        # Check if this is batch mode processing
        if [ -f "$actual_profile_file" ] && grep -q "^BATCH_MODE:" "$actual_profile_file" 2>/dev/null; then
            # Extract temp directory path
            local temp_dir=$(grep "^BATCH_MODE:" "$actual_profile_file" | cut -d: -f2)
            
            log_info "Processing profiles in batch mode..."
            local created_count=0
            local failed_count=0
            
            # Read profile files from the batch file (skip the first BATCH_MODE line)
            while IFS= read -r profile_file_path; do
                if [[ "$profile_file_path" =~ ^BATCH_MODE: ]]; then
                    continue
                fi
                
                if [ -f "$profile_file_path" ]; then
                    local base_profile_name="$(basename "$profile_file_path" .profile)"
                    log_info "Creating profile: $base_profile_name"
                    
                    # Create profile from this file
                    if create_profile_from_file "$profile_file_path" "$base_profile_name"; then
                        ((created_count++))
                    else
                        log_warning "Failed to create profile: $base_profile_name"
                        ((failed_count++))
                    fi
                fi
            done < "$actual_profile_file"
            
            # Clean up
            rm -rf "$temp_dir" "$temp_file"
            
            echo ""
            log_success "Batch processing completed!"
            log_info "Created: $created_count profiles"
            if [ $failed_count -gt 0 ]; then
                log_warning "Failed: $failed_count profiles"
            fi
            
            exit 0
        else
            # Single profile creation
            create_profile_from_file "$actual_profile_file" "$profile_name"
            local result=$?
            
            # Clean up temp file if we downloaded one
            if [ -n "$temp_file" ]; then
                rm -f "$temp_file"
            fi
            
            exit $result
        fi
    fi
    
    create_profiles_dir
    local profile_path="$PROFILES_DIR/$profile_name"
    
    if [ -d "$profile_path" ]; then
        log_error "Profile '$profile_name' already exists"
        exit 1
    fi
    
    mkdir -p "$profile_path"
    log_success "Created profile '$profile_name'"
    log_info "Profile directory: $profile_path"
    
    # Auto-configure if options provided
    if [ -n "$org_url" ] || [ -n "$pat_token" ] || [ -n "$pat_file" ]; then
        log_info "Auto-configuring profile..."
        
        # Handle PAT authentication
        if [ -n "$pat_file" ]; then
            if [ -f "$pat_file" ]; then
                pat_token=$(cat "$pat_file" 2>/dev/null | tr -d '\n')
                if [ -z "$pat_token" ]; then
                    log_error "PAT file '$pat_file' is empty or unreadable"
                    exit 1
                fi
            else
                log_error "PAT file '$pat_file' not found"
                exit 1
            fi
        fi
        
        # Login with PAT if provided
        if [ -n "$pat_token" ]; then
            log_info "Logging in with PAT..."
            if ! command -v az >/dev/null 2>&1; then
                log_error "Azure CLI (az) is not installed or not in PATH"
                exit 1
            fi
            echo "$pat_token" | AZURE_CONFIG_DIR="$profile_path" az devops login 2>/dev/null
            if [ $? -eq 0 ]; then
                log_success "Logged in using PAT for profile '$profile_name'"
            else
                log_error "Failed to login with provided PAT"
                exit 1
            fi
        fi
        
        # Configure Azure cloud if provided
        if [ -n "$azure_cloud" ]; then
            log_info "Setting Azure cloud to: $azure_cloud"
            if ! command -v az >/dev/null 2>&1; then
                log_error "Azure CLI (az) is not installed or not in PATH"
                exit 1
            fi
            AZURE_CONFIG_DIR="$profile_path" az cloud set --name="$azure_cloud"
            if [ $? -eq 0 ]; then
                log_success "Azure cloud configured for profile '$profile_name'"
            else
                log_error "Failed to configure Azure cloud"
                exit 1
            fi
        fi
        
        # Configure organization if provided
        if [ -n "$org_url" ]; then
            log_info "Setting organization to: $org_url"
            if ! command -v az >/dev/null 2>&1; then
                log_error "Azure CLI (az) is not installed or not in PATH"
                exit 1
            fi
            AZURE_CONFIG_DIR="$profile_path" az devops configure --defaults organization="$org_url"
            if [ $? -eq 0 ]; then
                log_success "Organization configured for profile '$profile_name'"
            else
                log_error "Failed to configure organization"
                exit 1
            fi
        fi
        
        log_success "Profile '$profile_name' created and configured successfully!"
        log_info "To use: $0 activate $profile_name"
    else
        log_info "Next steps:"
        echo "  1. $0 login $profile_name"
        echo "  2. $0 configure $profile_name"
        echo "  3. $0 activate $profile_name"
    fi
}

# Activate a profile
activate_profile() {
    local profile_name="$1"
    
    if [ -z "$profile_name" ]; then
        log_error "Profile name is required"
        echo "Usage: $0 activate <profile_name>"
        exit 1
    fi
    
    local profile_path="$PROFILES_DIR/$profile_name"
    
    if [ ! -d "$profile_path" ]; then
        log_error "Profile '$profile_name' does not exist"
        echo "Available profiles:"
        list_profiles
        exit 1
    fi
    
    echo "$profile_name" > "$ACTIVE_PROFILE_FILE"
    
    # Export environment variable for current session
    export AZURE_CONFIG_DIR="$profile_path"
    
    log_success "Activated profile '$profile_name'"
    log_info "Azure config directory: $profile_path"
    log_warning "Note: This activation is only for the current shell session."
    log_info "To persist across sessions, run: export AZURE_CONFIG_DIR=\"$profile_path\""
    
    # Show current Azure context
    if command -v az >/dev/null 2>&1; then
        echo ""
        log_info "Current Azure context:"
        AZURE_CONFIG_DIR="$profile_path" az account show --query "{name:name, id:id, tenantId:tenantId}" -o table 2>/dev/null || echo "  Not logged in"
    fi
}

# Deactivate current profile
deactivate_profile() {
    if [ -f "$ACTIVE_PROFILE_FILE" ]; then
        local current_profile=$(cat "$ACTIVE_PROFILE_FILE")
        rm -f "$ACTIVE_PROFILE_FILE"
        unset AZURE_CONFIG_DIR
        log_success "Deactivated profile '$current_profile'"
        log_info "Azure CLI will use default configuration"
    else
        log_info "No active profile to deactivate"
    fi
}

# Show current profile status
show_status() {
    if [ -f "$ACTIVE_PROFILE_FILE" ]; then
        local active_profile=$(cat "$ACTIVE_PROFILE_FILE")
        echo "Active Profile: $active_profile"
        echo "Config Directory: $PROFILES_DIR/$active_profile"
        
        # Check if environment variable is set
        if [ "$AZURE_CONFIG_DIR" = "$PROFILES_DIR/$active_profile" ]; then
            echo -e "Environment Status: ${GREEN}Active${NC}"
        else
            echo -e "Environment Status: ${YELLOW}Not set in current shell${NC}"
            log_info "Run: export AZURE_CONFIG_DIR=\"$PROFILES_DIR/$active_profile\""
        fi
        
        # Show Azure context if available
        if command -v az >/dev/null 2>&1; then
            echo ""
            echo "Azure Context:"
            AZURE_CONFIG_DIR="$PROFILES_DIR/$active_profile" az account show --query "{name:name, id:id, tenantId:tenantId}" -o table 2>/dev/null || echo "  Not logged in"
        fi
    else
        echo "No active profile"
        echo "Available profiles:"
        list_profiles
    fi
}

# Delete a profile
delete_profile() {
    local profile_name="$1"
    
    if [ -z "$profile_name" ]; then
        log_error "Profile name is required"
        echo "Usage: $0 delete <profile_name>"
        exit 1
    fi
    
    local profile_path="$PROFILES_DIR/$profile_name"
    
    if [ ! -d "$profile_path" ]; then
        log_error "Profile '$profile_name' does not exist"
        exit 1
    fi
    
    echo -n "Are you sure you want to delete profile '$profile_name'? [y/N]: "
    read -r confirmation
    
    if [[ "$confirmation" =~ ^[Yy]$ ]]; then
        # If this is the active profile, deactivate it
        if [ -f "$ACTIVE_PROFILE_FILE" ] && [ "$(cat "$ACTIVE_PROFILE_FILE")" = "$profile_name" ]; then
            rm -f "$ACTIVE_PROFILE_FILE"
            unset AZURE_CONFIG_DIR
            log_info "Deactivated profile '$profile_name'"
        fi
        
        rm -rf "$profile_path"
        log_success "Deleted profile '$profile_name'"
    else
        log_info "Profile deletion cancelled"
    fi
}

# Login to Azure for a specific profile
login_profile() {
    local profile_name="$1"
    
    if [ -z "$profile_name" ]; then
        log_error "Profile name is required"
        echo "Usage: $0 login <profile_name>"
        exit 1
    fi
    
    local profile_path="$PROFILES_DIR/$profile_name"
    
    if [ ! -d "$profile_path" ]; then
        log_error "Profile '$profile_name' does not exist"
        exit 1
    fi
    
    if ! command -v az >/dev/null 2>&1; then
        log_error "Azure CLI (az) is not installed or not in PATH"
        exit 1
    fi
    
    log_info "Logging into Azure for profile '$profile_name'..."
    
    echo "Choose login method:"
    echo "1) Regular Azure login (Azure AD)"
    echo "2) Azure DevOps Server with PAT (Personal Access Token)"
    echo "3) Azure DevOps Server interactive (no subscriptions)"
    echo -n "Enter choice [1-3]: "
    read -r choice
    
    case $choice in
        2)
            echo -n "Enter PAT (Personal Access Token): "
            read -rs pat_token
            echo ""
            if [ -n "$pat_token" ]; then
                # Login using PAT - this creates a service principal-like authentication
                echo "$pat_token" | AZURE_CONFIG_DIR="$profile_path" az devops login
                log_success "Logged in using PAT for profile '$profile_name'"
            else
                log_error "PAT is required for this login method"
                exit 1
            fi
            ;;
        3)
            AZURE_CONFIG_DIR="$profile_path" az login --allow-no-subscriptions
            ;;
        *)
            AZURE_CONFIG_DIR="$profile_path" az login
            ;;
    esac
    
    log_success "Login completed for profile '$profile_name'"
}

# Configure DevOps defaults for a profile
configure_profile() {
    local profile_name="$1"
    
    if [ -z "$profile_name" ]; then
        log_error "Profile name is required"
        echo "Usage: $0 configure <profile_name>"
        exit 1
    fi
    
    local profile_path="$PROFILES_DIR/$profile_name"
    
    if [ ! -d "$profile_path" ]; then
        log_error "Profile '$profile_name' does not exist"
        exit 1
    fi
    
    if ! command -v az >/dev/null 2>&1; then
        log_error "Azure CLI (az) is not installed or not in PATH"
        exit 1
    fi
    
    echo "Configure Azure DevOps defaults for '$profile_name'"
    echo ""
    echo "Example organizations:"
    echo "  Azure DevOps (cloud): https://dev.azure.com/yourorg"
    echo "  Azure DevOps Server:   https://your-server/your-collection"
    echo ""
    echo -n "Enter organization URL: "
    read -r org_url
    
    if [ -n "$org_url" ]; then
        log_info "Setting default organization for profile '$profile_name'..."
        AZURE_CONFIG_DIR="$profile_path" az devops configure --defaults organization="$org_url"
        log_success "Configuration completed for profile '$profile_name'"
    else
        log_warning "No organization URL provided, skipping configuration"
    fi
}

# Run an az command with a specific profile
run_with_profile() {
    local profile_name="$1"
    shift
    
    if [ -z "$profile_name" ]; then
        log_error "Profile name is required"
        echo "Usage: $0 run <profile_name> <az_command>"
        exit 1
    fi
    
    local profile_path="$PROFILES_DIR/$profile_name"
    
    if [ ! -d "$profile_path" ]; then
        log_error "Profile '$profile_name' does not exist"
        exit 1
    fi
    
    if ! command -v az >/dev/null 2>&1; then
        log_error "Azure CLI (az) is not installed or not in PATH"
        exit 1
    fi
    
    if [ $# -eq 0 ]; then
        log_error "Azure CLI command is required"
        echo "Usage: $0 run <profile_name> <az_command>"
        echo "Example: $0 run myorg devops project list"
        exit 1
    fi
    
    log_info "Running command with profile '$profile_name': az $*"
    AZURE_CONFIG_DIR="$profile_path" az "$@"
}

# Main script logic
main() {
    case "$1" in
        "list"|"ls")
            list_profiles
            ;;
        "create")
            create_profile "${@:2}"
            ;;
        "activate")
            activate_profile "$2"
            ;;
        "deactivate")
            deactivate_profile
            ;;
        "delete")
            delete_profile "$2"
            ;;
        "status")
            show_status
            ;;
        "login")
            login_profile "$2"
            ;;
        "configure")
            configure_profile "$2"
            ;;
        "run")
            run_with_profile "$2" "${@:3}"
            ;;
        "help"|"--help"|"-h"|"")
            show_usage
            ;;
        *)
            log_error "Unknown command: $1"
            echo ""
            show_usage
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
